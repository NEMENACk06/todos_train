#!/bin/bash -e

# Enable jemalloc for reduced memory usage and latency.
if [ -z "${LD_PRELOAD+x}" ]; then
  LD_PRELOAD=$(find /usr/lib -name libjemalloc.so.2 -print -quit || true)
  export LD_PRELOAD
fi

# Helpful defaults
export RAILS_ENV="${RAILS_ENV:-production}"
export RACK_ENV="${RACK_ENV:-$RAILS_ENV}"

# 1) เตรียมฐานข้อมูล (สร้าง/รันไมเกรต) เฉพาะตอนจะสตาร์ท server
if [ "${@: -2:1}" = "./bin/rails" ] && [ "${@: -1:1}" = "server" ]; then
  echo "[entrypoint] db:prepare…"
  ./bin/rails db:prepare
fi

# 2) Precompile assets ตอน runtime (เมื่อ ENV จริงของ Render พร้อมแล้ว)
#    - ข้ามได้ด้วย SKIP_ASSETS=1
#    - ต้องมี RAILS_MASTER_KEY (เพราะ production)
if [ "${RAILS_ENV}" = "production" ] && [ -z "${SKIP_ASSETS}" ]; then
  if [ ! -d "public/assets" ] || [ -z "$(ls -A public/assets 2>/dev/null)" ]; then
    echo "[entrypoint] assets:precompile…"
    : "${RAILS_MASTER_KEY:?RAILS_MASTER_KEY is required for assets:precompile in production}"
    # ปิด bootsnap ระหว่าง compile เพื่อลด edge case
    DISABLE_BOOTSNAP=1 bundle exec rails assets:precompile
  else
    echo "[entrypoint] assets already present, skip precompile."
  fi
fi

# 3) กันพอร์ตผิด: Rails บน Render ต้องฟัง $PORT และ 0.0.0.0
export PORT="${PORT:-3000}"
echo "[entrypoint] Ready to exec: $* (PORT=$PORT, RAILS_ENV=$RAILS_ENV)"

# Launch
exec "$@"
